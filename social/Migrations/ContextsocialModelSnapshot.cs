// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using social.Models;

namespace social.Migrations
{
    [DbContext(typeof(Contextsocial))]
    partial class ContextsocialModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("social.Models.Entity.Account", b =>
                {
                    b.Property<int>("accountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("activeAll")
                        .HasColumnType("bit");

                    b.Property<bool>("activeUser")
                        .HasColumnType("bit");

                    b.Property<int>("authCode")
                        .HasColumnType("int");

                    b.Property<string>("birthDay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("danger")
                        .HasColumnType("bit");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fullname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("peerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("picturename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("registerDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("accountId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("social.Models.Entity.AccountJoin", b =>
                {
                    b.Property<int>("accjoinId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<int>("accountId2")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("dt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("follower")
                        .HasColumnType("bit");

                    b.Property<bool>("follower2")
                        .HasColumnType("bit");

                    b.Property<bool>("following")
                        .HasColumnType("bit");

                    b.Property<bool>("following2")
                        .HasColumnType("bit");

                    b.Property<bool>("fullfollow")
                        .HasColumnType("bit");

                    b.Property<bool>("ignore")
                        .HasColumnType("bit");

                    b.Property<bool>("request")
                        .HasColumnType("bit");

                    b.Property<bool>("send")
                        .HasColumnType("bit");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("accjoinId");

                    b.HasIndex("accountId");

                    b.ToTable("AccountJoins");
                });

            modelBuilder.Entity("social.Models.Entity.ChatFiles", b =>
                {
                    b.Property<int>("cfId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<string>("filename")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cfId");

                    b.HasIndex("accountId");

                    b.ToTable("ChatFiles");
                });

            modelBuilder.Entity("social.Models.Entity.CommentExtera", b =>
                {
                    b.Property<int>("ceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<int?>("commentPostcpId")
                        .HasColumnType("int");

                    b.Property<int>("cpId")
                        .HasColumnType("int");

                    b.Property<bool>("like")
                        .HasColumnType("bit");

                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<int?>("postMpostId")
                        .HasColumnType("int");

                    b.Property<bool>("report")
                        .HasColumnType("bit");

                    b.Property<bool>("see")
                        .HasColumnType("bit");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ceId");

                    b.HasIndex("commentPostcpId");

                    b.HasIndex("postMpostId");

                    b.ToTable("CommentExteras");
                });

            modelBuilder.Entity("social.Models.Entity.CommentPost", b =>
                {
                    b.Property<int>("cpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<int>("postId")
                        .HasColumnType("int");

                    b.Property<int?>("postMpostId")
                        .HasColumnType("int");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("cpId");

                    b.HasIndex("accountId");

                    b.HasIndex("postMpostId");

                    b.ToTable("CommentPosts");
                });

            modelBuilder.Entity("social.Models.Entity.Conversation", b =>
                {
                    b.Property<int>("converId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UpdateAlluaId")
                        .HasColumnType("int");

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<bool>("activetext")
                        .HasColumnType("bit");

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.Property<bool>("danger")
                        .HasColumnType("bit");

                    b.Property<string>("filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("gropId")
                        .HasColumnType("int");

                    b.Property<string>("pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("sendAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("video")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("voice")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("converId");

                    b.HasIndex("UpdateAlluaId");

                    b.HasIndex("accountId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("social.Models.Entity.Group", b =>
                {
                    b.Property<int>("groupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<bool>("activetext")
                        .HasColumnType("bit");

                    b.Property<int>("countSee")
                        .HasColumnType("int");

                    b.Property<bool>("danger")
                        .HasColumnType("bit");

                    b.Property<int>("like")
                        .HasColumnType("int");

                    b.Property<int>("managerId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("report")
                        .HasColumnType("int");

                    b.Property<string>("subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("groupId");

                    b.HasIndex("accountId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("social.Models.Entity.People", b =>
                {
                    b.Property<int>("pId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<int>("gropId")
                        .HasColumnType("int");

                    b.Property<int?>("groupId")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("pId");

                    b.HasIndex("accountId");

                    b.HasIndex("groupId");

                    b.ToTable("Peoplese");
                });

            modelBuilder.Entity("social.Models.Entity.PostM", b =>
                {
                    b.Property<int>("postId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UpdateAlluaId")
                        .HasColumnType("int");

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<int>("countSee")
                        .HasColumnType("int");

                    b.Property<bool>("danger")
                        .HasColumnType("bit");

                    b.Property<int>("like")
                        .HasColumnType("int");

                    b.Property<string>("pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("report")
                        .HasColumnType("int");

                    b.Property<string>("subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("textAll")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("postId");

                    b.HasIndex("UpdateAlluaId");

                    b.HasIndex("accountId");

                    b.ToTable("PostMs");
                });

            modelBuilder.Entity("social.Models.Entity.Questions", b =>
                {
                    b.Property<int>("qId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UpdateAlluaId")
                        .HasColumnType("int");

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<int>("countSee")
                        .HasColumnType("int");

                    b.Property<bool>("danger")
                        .HasColumnType("bit");

                    b.Property<int>("like")
                        .HasColumnType("int");

                    b.Property<string>("subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("textAll")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("qId");

                    b.HasIndex("UpdateAlluaId");

                    b.HasIndex("accountId");

                    b.ToTable("Qustions");
                });

            modelBuilder.Entity("social.Models.Entity.Story", b =>
                {
                    b.Property<int>("storyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("accjoinId")
                        .HasColumnType("int");

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<int?>("accountJoinaccjoinId")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("dt")
                        .HasColumnType("datetime2");

                    b.Property<string>("filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prefix")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("storyId");

                    b.HasIndex("accountId");

                    b.HasIndex("accountJoinaccjoinId");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("social.Models.Entity.UpdateAll", b =>
                {
                    b.Property<int>("uaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<bool>("converUp")
                        .HasColumnType("bit");

                    b.Property<bool>("postUp")
                        .HasColumnType("bit");

                    b.Property<bool>("questUp")
                        .HasColumnType("bit");

                    b.HasKey("uaId");

                    b.HasIndex("accountId");

                    b.ToTable("UpdateAlls");
                });

            modelBuilder.Entity("social.Models.Entity.VisitorHits", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DateTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitHit")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("VisitorHits");
                });

            modelBuilder.Entity("social.Models.Entity.callus", b =>
                {
                    b.Property<int>("callusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("callusId");

                    b.ToTable("Callus");
                });

            modelBuilder.Entity("social.Models.Entity.chatMessage", b =>
                {
                    b.Property<int>("chatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<int>("accountId2")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<bool>("active1")
                        .HasColumnType("bit");

                    b.Property<bool>("active2")
                        .HasColumnType("bit");

                    b.Property<int?>("count")
                        .HasColumnType("int");

                    b.Property<string>("fileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("sendAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("video")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("voice")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("chatId");

                    b.HasIndex("accountId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("social.Models.Entity.provinces", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("slug")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("provinces");
                });

            modelBuilder.Entity("social.Models.Entity.sharefile", b =>
                {
                    b.Property<int>("shareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("filename")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("shareId");

                    b.ToTable("Sharefiles");
                });

            modelBuilder.Entity("social.Models.Entity.wcam", b =>
                {
                    b.Property<int>("wcamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("accountId")
                        .HasColumnType("int");

                    b.Property<int>("accountId1")
                        .HasColumnType("int");

                    b.Property<int>("accountId2")
                        .HasColumnType("int");

                    b.Property<bool>("calluser1")
                        .HasColumnType("bit");

                    b.Property<bool>("calluser2")
                        .HasColumnType("bit");

                    b.Property<string>("peerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("wcamId");

                    b.HasIndex("accountId");

                    b.ToTable("Wcams");
                });

            modelBuilder.Entity("social.Models.Entity.AccountJoin", b =>
                {
                    b.HasOne("social.Models.Entity.Account", "account")
                        .WithMany("accountJoins")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("social.Models.Entity.ChatFiles", b =>
                {
                    b.HasOne("social.Models.Entity.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("social.Models.Entity.CommentExtera", b =>
                {
                    b.HasOne("social.Models.Entity.CommentPost", "commentPost")
                        .WithMany()
                        .HasForeignKey("commentPostcpId");

                    b.HasOne("social.Models.Entity.PostM", "postM")
                        .WithMany()
                        .HasForeignKey("postMpostId");
                });

            modelBuilder.Entity("social.Models.Entity.CommentPost", b =>
                {
                    b.HasOne("social.Models.Entity.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("social.Models.Entity.PostM", "postM")
                        .WithMany("commentPosts")
                        .HasForeignKey("postMpostId");
                });

            modelBuilder.Entity("social.Models.Entity.Conversation", b =>
                {
                    b.HasOne("social.Models.Entity.UpdateAll", null)
                        .WithMany("conversations")
                        .HasForeignKey("UpdateAlluaId");

                    b.HasOne("social.Models.Entity.Account", "account")
                        .WithMany("conversations")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("social.Models.Entity.Group", b =>
                {
                    b.HasOne("social.Models.Entity.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("social.Models.Entity.People", b =>
                {
                    b.HasOne("social.Models.Entity.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("social.Models.Entity.Group", null)
                        .WithMany("Peoples")
                        .HasForeignKey("groupId");
                });

            modelBuilder.Entity("social.Models.Entity.PostM", b =>
                {
                    b.HasOne("social.Models.Entity.UpdateAll", null)
                        .WithMany("postM")
                        .HasForeignKey("UpdateAlluaId");

                    b.HasOne("social.Models.Entity.Account", "account")
                        .WithMany("postMs")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("social.Models.Entity.Questions", b =>
                {
                    b.HasOne("social.Models.Entity.UpdateAll", null)
                        .WithMany("questions")
                        .HasForeignKey("UpdateAlluaId");

                    b.HasOne("social.Models.Entity.Account", "account")
                        .WithMany("qustions")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("social.Models.Entity.Story", b =>
                {
                    b.HasOne("social.Models.Entity.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("social.Models.Entity.AccountJoin", "accountJoin")
                        .WithMany()
                        .HasForeignKey("accountJoinaccjoinId");
                });

            modelBuilder.Entity("social.Models.Entity.UpdateAll", b =>
                {
                    b.HasOne("social.Models.Entity.Account", "account")
                        .WithMany("updateAlls")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("social.Models.Entity.chatMessage", b =>
                {
                    b.HasOne("social.Models.Entity.Account", "account")
                        .WithMany("chatMessages")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("social.Models.Entity.wcam", b =>
                {
                    b.HasOne("social.Models.Entity.Account", "account")
                        .WithMany("wcams")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
